This example is nearly the simplest possible accelerator.  The RTL receives
an address via a memory mapped I/O (MMIO) write and generates a CCI write
to the memory line at that address, containing the string "Hello World!".
The software spins, waiting for the line to update.  Once available, the
software prints the string.

Build both the software and hardware using the steps described in the
parent directory: ../README.  In short:

  One shell for running RTL simulation:
    cd hw
    rm -rf build
    ./sim/setup_ase build
    cd build
    make
    make sim

  One shell for running the software:
    cd sw
    make
    export ASE_WORKDIR=<path printed by ASE above>/hw/build/work
    ./cci_hello_ase


The RTL is contained entirely in hw/rtl/cci_hello_afu.sv and
demonstrates the following universal AFU requirements:

  - The CCI request and response ports are clocked by pClk.

  - Reset (pck_cp2af_softReset) is synchronous with pClk.

  - Outgoing request and incoming response wires must be registered.

  - All AFUs must implement a read-only device feature header (DFH) in
    MMIO space at MMIO address 0.  The DFH holds a 128 bit AFU ID, mapped
    to a pair of 64 bit MMIO "registers".  The AFU ID uniquely identifies
    the design.

  - CCI request rates are limited by off-chip physical bus speeds and by
    buffering inside the Intel-supplied FIU (the blue bitstream).  User RTL
    must honor the CCI almost full signals to avoid lost requests.


The software side is contained entirely in sw/cci_hello.c:

  - The AFU ID in the software must match the AFU ID in the hardware's DFH.

  - Both the MMIO region and the FPGA-accessible shared memory are mapped
    explicitly.

  - Memory addresses passed to the FIU's CCI request wires are in a
    physical I/O address space.  Since all CCI requests refer to entire 512
    bit memory lines, the example passes the line-based physical address
    to which "Hello World!" should be written.

  - The code in connect_to_accel() is a simplification of the ideal
    sequence.  The code detects at most one accelerator matching the
    desired UUID.  Later examples detect when multiple instances of the
    same hardware are available in case one is already in use.


All of the examples in this tutorial share a framework for configuring ASE
to simulate RTL.  <example path>/hw/sim/setup_ase checks the environment
and invokes the common base/hw/sim/setup_ase_sim.py Python script.  The
Python script uses ASE's standard configuration script to build a
simulation environment.  setup_ase_sim.py then adjusts the build
environment to point to a file that loads RTL into the simulator.  This
file is always called hw/sim/sources.txt.  This framework could be used for
any application that is simulated with ASE.
